<<<<<<< HEAD
<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Spring]]></title><description><![CDATA[Level up your Java code and explore what Spring can do for you.]]></description><link>https://spring.io</link><generator>GatsbyJS</generator><lastBuildDate>Thu, 20 Jul 2023 17:24:20 GMT</lastBuildDate><item><title><![CDATA[Spring Boot 3.2.0-M1 available now]]></title><link>https://spring.io/blog/2023/07/20/spring-boot-3-2-0-m1-available-now</link><guid isPermaLink="true">https://spring.io/blog/2023/07/20/spring-boot-3-2-0-m1-available-now</guid><dc:creator><![CDATA[Andy Wilkinson]]></dc:creator><pubDate>Thu, 20 Jul 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the team and everyone who has contributed, I&apos;m happy to announce that Spring Boot &lt;code&gt;3.2.0-M1&lt;/code&gt; has been released and is now available from &lt;a href=&quot;https://repo.spring.io/milestone&quot;&gt;https://repo.spring.io/milestone&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This release includes &lt;a href=&quot;https://github.com/spring-projects/spring-boot/releases/tag/v3.2.0-M1&quot;&gt;141 enhancements, documentation improvements, dependency upgrades, and bug fixes&lt;/a&gt;. Notable new features include:&lt;/p&gt;
=======
<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Spring]]></title><description><![CDATA[Level up your Java code and explore what Spring can do for you.]]></description><link>https://spring.io</link><generator>GatsbyJS</generator><lastBuildDate>Thu, 06 Jul 2023 18:21:03 GMT</lastBuildDate><item><title><![CDATA[A Bootiful Podcast: Jetbrains' Anton Arhipov on IntelliJ, Java, and so much more ]]></title><link>https://spring.io/blog/2023/07/06/a-bootiful-podcast-jetbrains-anton-arhipov-on-intellij-java-and-so-much-more</link><guid isPermaLink="true">https://spring.io/blog/2023/07/06/a-bootiful-podcast-jetbrains-anton-arhipov-on-intellij-java-and-so-much-more</guid><dc:creator><![CDATA[Josh Long]]></dc:creator><pubDate>Thu, 06 Jul 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Hi, Spring fans! Welcome to another installment of &lt;a href=&quot;https://bootifulpodcast.fm&quot;&gt;&lt;em&gt;A Bootiful Podcast&lt;/em&gt;&lt;/a&gt;! This week  &lt;a href=&quot;https://youtube.com/@coffeesoftware&quot;&gt;Josh Long&lt;/a&gt; talks to &lt;a href=&quot;https://twitter.com/antonarhipov&quot;&gt;Jetbrain&apos;s developer advocate Anton Arhipov&lt;/a&gt;, recorded live from the amazing Spring IO show in Barcelona, Spain!&lt;/p&gt;
&lt;iframe title=&quot;Jetbrains¡¯ Anton Arhipov on IntelliJ, Java, and so much more &quot; allowtransparency=&quot;true&quot; height=&quot;150&quot; width=&quot;100%&quot; style=&quot;border: none; min-width: min(100%, 430px);height:150px;&quot; scrolling=&quot;no&quot; data-name=&quot;pb-iframe-player&quot; src=&quot;https://www.podbean.com/player-v2/?i=y8vqh-144da48-pb&amp;from=pb6admin&amp;share=1&amp;download=1&amp;rtl=0&amp;fonts=Arial&amp;skin=1&amp;font-color=&amp;logo_link=episode_page&amp;btn-skin=7&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;</content:encoded></item><item><title><![CDATA[Active Health Check strategies with Spring Cloud Gateway]]></title><link>https://spring.io/blog/2023/07/05/active-health-check-strategies-with-spring-cloud-gateway</link><guid isPermaLink="true">https://spring.io/blog/2023/07/05/active-health-check-strategies-with-spring-cloud-gateway</guid><dc:creator><![CDATA[Ignacio Lozano]]></dc:creator><pubDate>Wed, 05 Jul 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Active health check strategies with Spring Cloud Gateway&lt;/h1&gt;
&lt;p&gt;Nowadays, applications are built as a collection of small independent upstream services. This accelerates development and allows modules to be focused on specific responsibilities, increasing their quality. This is one of the main advantages of using a microservice approach. However, jumping from one service to another can add extra latency, and this latency can be dramatically higher when the services are not responding.&lt;/p&gt;
&lt;p&gt;If you run microservices, you want to prevent your upstream services from being called when they are not working properly. Even using a circuit breaker pattern can also generate a penalty in the response time. For this reason, it is sometimes better to actively check your upstream services to verify they are ready before they are needed.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A health check is a way to determine if a service can respond correctly according to its status, preventing timeouts and errors.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Passive health check&lt;/strong&gt; is done during request handling. If the service is finally unhealthy, the application will return a failure marking the endpoint unhealthy. It can add extra latency.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Active health check&lt;/strong&gt; will check and drop unhealthy services in the background before receiving the request. It doesn&apos;t add extra latency.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Last but not least, these features can be combined with a circuit breaker library to immediately fall back on an alternative endpoint without suffering the first miss penalty.&lt;/p&gt;
&lt;p&gt;The goal is for routes to forward the requests to upstream services that are healthy by using a load balancer strategy:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/mnrwi97vnhts/4X00jJADrVtK5bXFIGElTl/01ba8c47bf7599a9cab637333b96b672/active-hc-diagram.png&quot; alt=&quot;Active Health Check Diagram&quot;&gt;&lt;/p&gt;
&lt;p&gt;This post is divided into two parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&quot;Spring features you need&quot; - describing which Spring¡¯s features you need to get active health check.&lt;/li&gt;
&lt;li&gt;&quot;Registering endpoints for your services&quot; - visiting some approaches for adding one or more endpoints to your routes.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;1. Spring features you need&lt;/h1&gt;
&lt;p&gt;There are some features in Spring that can help you to get active health check&lt;/p&gt;
>>>>>>> origin/dev
&lt;ul&gt;
&lt;li&gt;Initial support for virtual threads when running on Java 21&lt;/li&gt;
&lt;li&gt;Auto-configuration for Spring Framework&apos;s new &lt;code&gt;RestClient&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Logging changes for improved observability&lt;/li&gt;
&lt;li&gt;Numerous dependency upgrades, including new milestones of several Spring projects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please see the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.2.0-M1-Release-Notes&quot;&gt;release notes&lt;/a&gt; for more details and upgrade instructions.&lt;/p&gt;
&lt;p&gt;Thanks to all those who have contributed with issue reports and pull requests.&lt;/p&gt;
&lt;h3&gt;How can you help?&lt;/h3&gt;
&lt;p&gt;If you&apos;re interested in helping out, check out the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/labels/status%3A%20ideal-for-contribution&quot;&gt;&quot;ideal for contribution&quot; tag&lt;/a&gt; in the issue repository. If you have general questions, please ask on &lt;a href=&quot;https://stackoverflow.com&quot;&gt;stackoverflow.com&lt;/a&gt; using the &lt;a href=&quot;https://stackoverflow.com/tags/spring-boot&quot;&gt;&lt;code&gt;spring-boot&lt;/code&gt; tag&lt;/a&gt; or chat with the community on &lt;a href=&quot;https://gitter.im/spring-projects/spring-boot&quot;&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-boot/&quot;&gt;Project Page&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-boot&quot;&gt;GitHub&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-boot/issues&quot;&gt;Issues&lt;/a&gt; | &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/3.2.0-M1/reference/html&quot;&gt;Documentation&lt;/a&gt; | &lt;a href=&quot;https://stackoverflow.com/questions/tagged/spring-boot&quot;&gt;Stack Overflow&lt;/a&gt; | &lt;a href=&quot;https://gitter.im/spring-projects/spring-boot&quot;&gt;Gitter&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring Boot 3.1.2 available now]]></title><link>https://spring.io/blog/2023/07/20/spring-boot-3-1-2-available-now</link><guid isPermaLink="true">https://spring.io/blog/2023/07/20/spring-boot-3-1-2-available-now</guid><dc:creator><![CDATA[Andy Wilkinson]]></dc:creator><pubDate>Thu, 20 Jul 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the team and everyone who has contributed, I&apos;m happy to announce that Spring Boot &lt;code&gt;3.1.2&lt;/code&gt; has been released and is now available from Maven Central.&lt;/p&gt;
&lt;p&gt;This release includes &lt;a href=&quot;https://github.com/spring-projects/spring-boot/releases/tag/v3.1.2&quot;&gt;60 bug fixes, documentation improvements, and dependency upgrades&lt;/a&gt;. Thanks to all those who have contributed with issue reports and pull requests.&lt;/p&gt;
&lt;h3&gt;How can you help?&lt;/h3&gt;
&lt;p&gt;If you&apos;re interested in helping out, check out the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/labels/status%3A%20ideal-for-contribution&quot;&gt;&quot;ideal for contribution&quot; tag&lt;/a&gt; in the issue repository. If you have general questions, please ask on &lt;a href=&quot;https://stackoverflow.com&quot;&gt;stackoverflow.com&lt;/a&gt; using the &lt;a href=&quot;https://stackoverflow.com/tags/spring-boot&quot;&gt;&lt;code&gt;spring-boot&lt;/code&gt; tag&lt;/a&gt; or chat with the community on &lt;a href=&quot;https://gitter.im/spring-projects/spring-boot&quot;&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-boot/&quot;&gt;Project Page&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-boot&quot;&gt;GitHub&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-boot/issues&quot;&gt;Issues&lt;/a&gt; | &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/3.1.2/reference/html&quot;&gt;Documentation&lt;/a&gt; | &lt;a href=&quot;https://stackoverflow.com/questions/tagged/spring-boot&quot;&gt;Stack Overflow&lt;/a&gt; | &lt;a href=&quot;https://gitter.im/spring-projects/spring-boot&quot;&gt;Gitter&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring Boot 3.0.9 available now]]></title><link>https://spring.io/blog/2023/07/20/spring-boot-3-0-9-available-now</link><guid isPermaLink="true">https://spring.io/blog/2023/07/20/spring-boot-3-0-9-available-now</guid><dc:creator><![CDATA[Andy Wilkinson]]></dc:creator><pubDate>Thu, 20 Jul 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the team and everyone who has contributed, I&apos;m happy to announce that Spring Boot &lt;code&gt;3.0.9&lt;/code&gt; has been released and is now available from Maven Central.&lt;/p&gt;
&lt;p&gt;This release includes &lt;a href=&quot;https://github.com/spring-projects/spring-boot/releases/tag/v3.0.9&quot;&gt;49 bug fixes, documentation improvements, and dependency upgrades&lt;/a&gt;. Thanks to all those who have contributed with issue reports and pull requests.&lt;/p&gt;
&lt;h3&gt;How can you help?&lt;/h3&gt;
&lt;p&gt;If you&apos;re interested in helping out, check out the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/labels/status%3A%20ideal-for-contribution&quot;&gt;&quot;ideal for contribution&quot; tag&lt;/a&gt; in the issue repository. If you have general questions, please ask on &lt;a href=&quot;https://stackoverflow.com&quot;&gt;stackoverflow.com&lt;/a&gt; using the &lt;a href=&quot;https://stackoverflow.com/tags/spring-boot&quot;&gt;&lt;code&gt;spring-boot&lt;/code&gt; tag&lt;/a&gt; or chat with the community on &lt;a href=&quot;https://gitter.im/spring-projects/spring-boot&quot;&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-boot/&quot;&gt;Project Page&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-boot&quot;&gt;GitHub&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-boot/issues&quot;&gt;Issues&lt;/a&gt; | &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/3.0.9/reference/html&quot;&gt;Documentation&lt;/a&gt; | &lt;a href=&quot;https://stackoverflow.com/questions/tagged/spring-boot&quot;&gt;Stack Overflow&lt;/a&gt; | &lt;a href=&quot;https://gitter.im/spring-projects/spring-boot&quot;&gt;Gitter&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring Boot 2.7.14 available now]]></title><link>https://spring.io/blog/2023/07/20/spring-boot-2-7-14-available-now</link><guid isPermaLink="true">https://spring.io/blog/2023/07/20/spring-boot-2-7-14-available-now</guid><dc:creator><![CDATA[Andy Wilkinson]]></dc:creator><pubDate>Thu, 20 Jul 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the team and everyone who has contributed, I&apos;m happy to announce that Spring Boot &lt;code&gt;2.7.14&lt;/code&gt; has been released and is now available from Maven Central.&lt;/p&gt;
&lt;p&gt;This release includes &lt;a href=&quot;https://github.com/spring-projects/spring-boot/releases/tag/v2.7.14&quot;&gt;27 bug fixes, documentation improvements, and dependency upgrades&lt;/a&gt;. Thanks to all those who have contributed with issue reports and pull requests.&lt;/p&gt;
&lt;h3&gt;How can you help?&lt;/h3&gt;
&lt;p&gt;If you&apos;re interested in helping out, check out the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/labels/status%3A%20ideal-for-contribution&quot;&gt;&quot;ideal for contribution&quot; tag&lt;/a&gt; in the issue repository. If you have general questions, please ask on &lt;a href=&quot;https://stackoverflow.com&quot;&gt;stackoverflow.com&lt;/a&gt; using the &lt;a href=&quot;https://stackoverflow.com/tags/spring-boot&quot;&gt;&lt;code&gt;spring-boot&lt;/code&gt; tag&lt;/a&gt; or chat with the community on &lt;a href=&quot;https://gitter.im/spring-projects/spring-boot&quot;&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-boot/&quot;&gt;Project Page&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-boot&quot;&gt;GitHub&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-boot/issues&quot;&gt;Issues&lt;/a&gt; | &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.7.14/reference/html&quot;&gt;Documentation&lt;/a&gt; | &lt;a href=&quot;https://stackoverflow.com/questions/tagged/spring-boot&quot;&gt;Stack Overflow&lt;/a&gt; | &lt;a href=&quot;https://gitter.im/spring-projects/spring-boot&quot;&gt;Gitter&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[A Bootiful Podcast: Java legend Simon Martinelli on Vaadin, JavaOOQ, and so more ]]></title><link>https://spring.io/blog/2023/07/20/a-bootiful-podcast-java-legend-simon-martinelli-on-vaadin-javaooq-and-so</link><guid isPermaLink="true">https://spring.io/blog/2023/07/20/a-bootiful-podcast-java-legend-simon-martinelli-on-vaadin-javaooq-and-so</guid><dc:creator><![CDATA[Josh Long]]></dc:creator><pubDate>Thu, 20 Jul 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Hi Spring fans! In this installment &lt;a href=&quot;https://twitter.com/starbuxman&quot;&gt;Josh Long&lt;/a&gt; talks to Java legend &lt;a href=&quot;https://martinelli.ch&quot;&gt;Simon Martinelli&lt;/a&gt; about Vaadin, Spring, JavaOOQ, and more. This episode was recorded live from beautiful Barcelona, Spain at the amazing Spring I/O show!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring HATEOAS 2.0.6, 2.1.2 and 2.2 M2 released]]></title><link>https://spring.io/blog/2023/07/19/spring-hateoas-2-0-6-2-1-2-and-2-2-m2-released</link><guid isPermaLink="true">https://spring.io/blog/2023/07/19/spring-hateoas-2-0-6-2-1-2-and-2-2-m2-released</guid><dc:creator><![CDATA[Oliver Drotbohm]]></dc:creator><pubDate>Wed, 19 Jul 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I am happy to announce the availability of Spring HATEOAS &lt;a href=&quot;https://github.com/spring-projects/spring-hateoas/releases/tag/2.0.6&quot;&gt;2.0.6&lt;/a&gt;, &lt;a href=&quot;https://github.com/spring-projects/spring-hateoas/releases/tag/2.1.2&quot;&gt;2.1.2&lt;/a&gt; and &lt;a href=&quot;https://github.com/spring-projects/spring-hateoas/releases/tag/2.2.0-M2&quot;&gt;2.2 M2&lt;/a&gt;. All releases solely ship a fix for a regression in our AOT reflection metadata generation so that applications building native images continue to work on the upcoming Spring Boot releases.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring Integration 6.2 Milestone 1 Available]]></title><link>https://spring.io/blog/2023/07/19/spring-integrtion-6-2-milestone-1-available</link><guid isPermaLink="true">https://spring.io/blog/2023/07/19/spring-integrtion-6-2-milestone-1-available</guid><dc:creator><![CDATA[Artem Bilan]]></dc:creator><pubDate>Wed, 19 Jul 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Dear Spring community,&lt;/p&gt;
&lt;p&gt;On behalf of Spring Integration team, it is my pleasure to announce &lt;code&gt;6.2.0-M1&lt;/code&gt; version which is available from &lt;a href=&quot;https://repo.spring.io/milestone&quot;&gt;Spring Milestone&lt;/a&gt; repository.&lt;/p&gt;
&lt;p&gt;In addition, bug fixes version &lt;code&gt;6.1.2&lt;/code&gt; has been released as well into Maven Central.&lt;/p&gt;
&lt;p&gt;The Spring Integration &lt;code&gt;6.2&lt;/code&gt; version is based on the Spring Framework &lt;code&gt;6.1.0-M2&lt;/code&gt; (can be upgraded to the latest &lt;a href=&quot;https://spring.io/blog/2023/07/19/spring-framework-6-1-m3-released&quot;&gt;&lt;code&gt;6.1.0-M3&lt;/code&gt;&lt;/a&gt;) and includes many internal improvements and refactoring to support JVM virtual thread and project CRaC effort.&lt;/p&gt;
&lt;p&gt;Some highlights of this new version include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Upgrades to the latest dependencies, some of they are release candidates and milestones&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We now use &lt;code&gt;org.eclipse.angus:jakarta.mail&lt;/code&gt; as Java Mail API implementation which replaces &lt;code&gt;com.sun.mail.imap&lt;/code&gt; package with the &lt;code&gt;org.eclipse.angus.mail.imap&lt;/code&gt;. Therefore this some kind of breaking change&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;spring-integration-debezium&lt;/code&gt; module has been introduced with a &lt;code&gt;DebeziumMessageProducer&lt;/code&gt; implementation and respective infrastructure, including Java DSL (shout out to &lt;a href=&quot;https://spring.io/team/tzolov&quot;&gt;Christian Tzolov&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pollers now can be configured with an ISO 8601 duration format for delays&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Components which logic is based on thread executors now expose a proper &lt;code&gt;AsyncTaskExecutor&lt;/code&gt; option to let end-user to opt-in for a new &lt;code&gt;VirtualThreadTaskExecutor&lt;/code&gt; from Spring Framework.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Java DSL (and therefore Kotlin &amp;#x26; Groovy) now provides a single &lt;code&gt;Consumer&lt;/code&gt; argument configuration methods for better end-user experience.
The code like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.transform((Integer p) -&gt; p * 2, c -&gt; c.advice(expressionAdvice()))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now is replaced with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.transformWith(t -&gt; t
       .transformer((Integer p) -&gt; p * 2)
       .advice(expressionAdvice()))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It might be a verbose, but easier to read and auto-complete in the IDE instead of hard choice of overloaded &lt;code&gt;transform()&lt;/code&gt; method with many arguments.
The Groovy DSL with this change looks much nicer:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;splitWith {
    expectedType Object
    id &apos;splitterEndpoint&apos;
    function { it }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Not all DSL operators were fixed for this new style yet: stay tuned for next milestones.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&quot;https://docs.spring.io/spring-integration/docs/6.2.0-M1/reference/html/whats-new.html#whats-new&quot;&gt;What&apos;s New&lt;/a&gt; in the documentation and don&apos;t forget about a &lt;a href=&quot;https://github.com/spring-projects/spring-integration/wiki/Spring-Integration-6.1-to-6.2-Migration-Guide&quot;&gt;Migration Guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Cheers,?&lt;br&gt;
Artem&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://projects.spring.io/spring-integration/&quot;&gt;Project Page&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-integration/issues&quot;&gt;GitHub Issues&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-integration/blob/master/CONTRIBUTING.adoc&quot;&gt;Contributing&lt;/a&gt; | &lt;a href=&quot;http://stackoverflow.com/questions/tagged/spring-integration&quot;&gt;Help&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring Framework 6.1 M3 released]]></title><link>https://spring.io/blog/2023/07/19/spring-framework-6-1-m3-released</link><guid isPermaLink="true">https://spring.io/blog/2023/07/19/spring-framework-6-1-m3-released</guid><dc:creator><![CDATA[Brian Clozel]]></dc:creator><pubDate>Wed, 19 Jul 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the Spring Framework framework team, it is my pleasure to announce that the third Spring Framework 6.1 milestone release is available from &lt;a href=&quot;htts://repo.spring.io/milestone&quot;&gt;repo.spring.io/milestone&lt;/a&gt; now. This release was not initially scheduled and acts as a quick follow-up to 6.1.0-M2 last week, right on time for the Spring Boot milestone.&lt;/p&gt;
&lt;p&gt;Spring Framework 6.1.0-M3 ships &lt;a href=&quot;https://github.com/spring-projects/spring-framework/milestone/329?closed=1&quot;&gt;a few fixes and improvements&lt;/a&gt;, including early support for JDK 22.&lt;/p&gt;
&lt;h2&gt;What&apos;s next&lt;/h2&gt;
&lt;p&gt;Check out our &lt;a href=&quot;https://github.com/spring-projects/spring-framework/wiki/What&amp;#x27;s-New-in-Spring-Framework-6.x&quot;&gt;What&apos;s New page&lt;/a&gt; for details about the specific features shipped so far. We are resuming with the usual schedule and we will ship the next milestone in a month.&lt;/p&gt;
&lt;p&gt;The first Spring Boot 3.2 milestone &lt;a href=&quot;https://calendar.spring.io/&quot;&gt;will be released tomorrow&lt;/a&gt; - perfect time for testing the new features and preparing upgrades!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring Batch 5.1.0-M1 available now!]]></title><link>https://spring.io/blog/2023/07/19/spring-batch-5-1-0-m1-available-now</link><guid isPermaLink="true">https://spring.io/blog/2023/07/19/spring-batch-5-1-0-m1-available-now</guid><dc:creator><![CDATA[Mahmoud Ben Hassine]]></dc:creator><pubDate>Wed, 19 Jul 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the team and everyone who has contributed, I am pleased to announce that the first milestone of Spring Batch 5.1 is now available from our &lt;a href=&quot;https://repo.spring.io/ui/native/milestone/org/springframework/batch/&quot;&gt;milestone repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This milestone release comes with the following features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dependencies upgrade&lt;/li&gt;
&lt;li&gt;Virtual Threads support&lt;/li&gt;
&lt;li&gt;Memory management improvement in the JpaItemWriter&lt;/li&gt;
&lt;li&gt;New synchronized decorators for item readers and writers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This blog post walks through these features in more details. For the complete list of changes, please check the &lt;a href=&quot;https://github.com/spring-projects/spring-batch/releases/tag/v5.1.0-M1&quot;&gt;release notes&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Dependencies upgrade&lt;/h2&gt;
&lt;p&gt;This milestone release upgrades Spring dependencies to the following versions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spring Framework 6.1.0-M2&lt;/li&gt;
&lt;li&gt;Spring Integration 6.2.0-M1&lt;/li&gt;
&lt;li&gt;Spring Data 3.2.0-M1&lt;/li&gt;
&lt;li&gt;Spring LDAP 3.2.0-M1&lt;/li&gt;
&lt;li&gt;Micrometer 1.12.0-M1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Virtual Threads support&lt;/h2&gt;
&lt;p&gt;Embracing JDK 21 LTS is one of the main themes for Spring Batch 5.1, especially the support of virtual threads from Project Loom. In this release, virtual threads can be used in all areas of the framework, like running a concurrent step with virtual threads or launching multiple steps in parallel using virtual threads.&lt;/p&gt;
&lt;p&gt;Thanks to the well designed separation of concerns in Spring Batch, threads are not managed directly. Thread management is rather delegated to &lt;code&gt;TaskExecutor&lt;/code&gt; implementations from Spring Framework. This programming-to interface approach allows you to switch between &lt;code&gt;TaskExecutor&lt;/code&gt; implementations in a transparent and a flexible way.&lt;/p&gt;
&lt;p&gt;In Spring Framework 6.1, a new &lt;code&gt;TaskExecutor&lt;/code&gt; implementation based on virtual threads has been introduced, which is the &lt;code&gt;VirtualThreadTaskExecutor&lt;/code&gt;. This &lt;code&gt;TaskExecutor&lt;/code&gt; can be used in Spring Batch wherever a &lt;code&gt;TaskExecutor&lt;/code&gt; is required. The following example shows how to configure a multi-threaded step using virtual threads:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@Bean
public VirtualThreadTaskExecutor taskExecutor() {
	return new VirtualThreadTaskExecutor(&quot;spring-batch-&quot;);
}

@Bean
public Step step(JobRepository jobRepository, PlatformTransactionManager transactionManager,
				 ItemReader&amp;#x3C;Integer&gt; itemReader, ItemWriter&amp;#x3C;Integer&gt; itemWriter,
				 VirtualThreadTaskExecutor taskExecutor) {
	return new StepBuilder(&quot;step&quot;, jobRepository).&amp;#x3C;Integer, Integer&gt;chunk(2, transactionManager)
		.reader(itemReader)
		.writer(itemWriter)
		.taskExecutor(taskExecutor)
		.build();
}
&lt;/code&gt;&lt;/pre&gt;
<<<<<<< HEAD
&lt;h2&gt;Memory management improvement in the JpaItemWriter&lt;/h2&gt;
&lt;p&gt;When using the &lt;code&gt;JpaItemWriter&lt;/code&gt;, the JPA persistence context can quickly grow when the chunk size is large enough. This might lead to &lt;code&gt;OutOfMemoryError&lt;/code&gt; errors if not cleared appropriately in a timely manner.&lt;/p&gt;
&lt;p&gt;In this milestone release, a new option named &lt;code&gt;clearPersistenceContext&lt;/code&gt; has been introduced in the &lt;code&gt;JpaItemWriter&lt;/code&gt; to clear the persistence context after writing each chunk of items. This option improves the memory management of chunk-oriented steps dealing with large amounts of data and configured with a big chunk size.&lt;/p&gt;
&lt;h2&gt;New synchronized decorators for item readers and writers&lt;/h2&gt;
&lt;p&gt;Up to version 5.0, Spring Batch provided two decorators &lt;code&gt;SynchronizedItemStreamReader&lt;/code&gt; and &lt;code&gt;SynchronizedItemStreamWriter&lt;/code&gt; to synchronize thread access to &lt;code&gt;ItemStreamReader#read&lt;/code&gt; and &lt;code&gt;ItemStreamWriter#write&lt;/code&gt;. Those decorators are useful when using non thread-safe item streams in multi-threaded steps.&lt;/p&gt;
&lt;p&gt;While those decorators work with &lt;code&gt;ItemStream&lt;/code&gt; implementations, they are not usable with non-item streams. For example, those decorators cannot be used to synchronize access to &lt;code&gt;ListItemReader#read&lt;/code&gt; or &lt;code&gt;KafkaItemWriter#write&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For users convenience, this release introduces new decorators for non-item streams as well. With this new feature, all item readers and writers in Spring Batch can now be synchronized without having to write custom decorators.&lt;/p&gt;
&lt;h2&gt;What&apos;s next?&lt;/h2&gt;
&lt;p&gt;First, I would like to thank all contributors who had a role in this release! You can try Spring Batch 5.1.0-M1 with Spring Boot 3.2.0-M1. We are planning to release Spring Batch 5.1 GA later this November 2023.&lt;/p&gt;
&lt;p&gt;We look forward to your feedback on &lt;a href=&quot;https://github.com/spring-projects/spring-batch/issues&quot;&gt;Github Issues&lt;/a&gt;,
&lt;a href=&quot;https://github.com/spring-projects/spring-batch/discussions&quot;&gt;Github Discussions&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/springbatch&quot;&gt;Twitter&lt;/a&gt;, and &lt;a href=&quot;https://stackoverflow.com/questions/tagged/spring-batch&quot;&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-batch&quot;&gt;Spring Batch Home&lt;/a&gt;|&lt;a href=&quot;https://github.com/spring-projects/spring-batch&quot;&gt;Source on Github&lt;/a&gt;|&lt;a href=&quot;https://docs.spring.io/spring-batch/docs/5.1.0-M1/reference/html/index.html&quot;&gt;Reference documentation&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring Session 3.2.0-M1 released!]]></title><link>https://spring.io/blog/2023/07/18/spring-session-3-2-0-m1-released</link><guid isPermaLink="true">https://spring.io/blog/2023/07/18/spring-session-3-2-0-m1-released</guid><dc:creator><![CDATA[Marcus Hert Da Coregio]]></dc:creator><pubDate>Tue, 18 Jul 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the team and everyone who has contributed, I am pleased to announce that Spring Session 3.2.0-M1 is available now. This release comes with the &lt;a href=&quot;https://docs.spring.io/spring-session/reference/3.2/configuration/common.html#changing-how-session-ids-are-generated&quot;&gt;support for using different strategies to generate session identifiers&lt;/a&gt;. Make sure to check it out and give your feedback.&lt;/p&gt;
&lt;p&gt;To learn more about that release, please visit the &lt;a href=&quot;https://github.com/spring-projects/spring-session/releases/tag/3.2.0-M1&quot;&gt;releases page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-session&quot;&gt;Project Site&lt;/a&gt; | &lt;a href=&quot;https://docs.spring.io/spring-session/reference/index.html&quot;&gt;Reference&lt;/a&gt; | &lt;a href=&quot;https://stackoverflow.com/questions/tagged/spring-session?tab=Newest&quot;&gt;Help&lt;/a&gt;&lt;/p&gt;</content:encoded></item></channel></rss>
=======
&lt;p&gt;Also, to browse the GraphQL data in an easy way, GraphiQL should be enabled in the &lt;em&gt;application.properties&lt;/em&gt;.
This is a helpful tool during development time.
Usually this should be disabled for production deployment.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-properties&quot;&gt;spring.graphql.graphiql.enabled=true
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;First run&lt;/h2&gt;
&lt;p&gt;If everything is set up as described above, the application can be started with &lt;code&gt;./mvnw spring-boot:run&lt;/code&gt;.
Browsing to &lt;a href=&quot;http://localhost:8080/graphiql?path=/graphql&quot;&gt;http://localhost:8080/graphiql?path=/graphql&lt;/a&gt; will present the GraphiQL explorer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Querying in GraphiQL&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/mnrwi97vnhts/2KWCeki2SceR3mbQnYE8Ob/9c3566cb612f5c8d8188d58050a95f84/graphiql.png&quot; alt=&quot;graphiql&quot;&gt;&lt;/p&gt;
&lt;p&gt;To verify that the &lt;code&gt;accounts&lt;/code&gt; method is working, a GraphQL request is sent to the application.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First GraphQL request&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  accounts {
    username
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and the expected answer gets returned from the server.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GraphQL response&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;data&quot;: {
    &quot;accounts&quot;: [
      {
        &quot;username&quot;: &quot;meistermeier&quot;
      },
      {
        &quot;username&quot;: &quot;rotnroll666&quot;
      },
      {
        &quot;username&quot;: &quot;odrotbohm&quot;
      }
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course the method in the controller can be tweaked by adding parameters for respecting arguments with &lt;code&gt;@Argument&lt;/code&gt;
or getting the requested fields (here &lt;em&gt;accounts.username&lt;/em&gt;) to squeeze down the amount of data that gets transported
over the network.
In the previous example, the repository will fetch all properties for the given domain entity, including all relationships.
This data will get mostly discarded to return only the &lt;em&gt;username&lt;/em&gt; to the user.&lt;/p&gt;
&lt;p&gt;This example should give an impression of what can be done with &lt;a href=&quot;https://docs.spring.io/spring-graphql/docs/current/reference/html/#controllers&quot;&gt;Annotated Controllers&lt;/a&gt;.
Adding the query generation and mapping capabilities of Spring Data Neo4j a (simple) GraphQL application was created.&lt;/p&gt;
&lt;p&gt;But at this point both libraries seem to live in parallel in this application and not yet like an integration.
How can SDN and Spring for GraphQL get &lt;em&gt;really&lt;/em&gt; combined?&lt;/p&gt;
&lt;h2&gt;Spring Data Neo4j GraphQL integration&lt;/h2&gt;
&lt;p&gt;As a first step, the &lt;code&gt;accounts&lt;/code&gt; method from the &lt;code&gt;AccountController&lt;/code&gt; can be deleted.
Restarting the application and querying it again with the request from above will still bring up the same result.&lt;/p&gt;
&lt;p&gt;This works because Spring for GraphQL recognizes the result type (array of) &lt;code&gt;Account&lt;/code&gt; from the GraphQL schema.
It scans for eligible Spring Data repositories that matches the type.
Those repositories have to extend the &lt;code&gt;QueryByExampleExecutor&lt;/code&gt; or &lt;code&gt;QuerydslPredicateExecutor&lt;/code&gt; (not part of this blog post) for the given type.
In this example, the &lt;code&gt;AccountRepository&lt;/code&gt; is already implicitly marked as &lt;code&gt;QueryByExampleExecutor&lt;/code&gt; because it is extending the &lt;code&gt;Neo4jRespository&lt;/code&gt;, that is already defining the executor.
The &lt;code&gt;@GraphQlRepository&lt;/code&gt; annotation makes Spring for GraphQL aware that this repository can and should be used for the queries, if possible.&lt;/p&gt;
&lt;p&gt;Without any changes to the actual code, a second &lt;em&gt;Query field&lt;/em&gt; can be defined in the schema.
This time it should filter the results by username.
A username looks unique at the first glance but in the Fediverse this is only true for a given instance.
Multiple instances could have the very same usernames in place.
To respect this behaviour, the query should be able to return an array of &lt;code&gt;Accounts&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The documentation about &lt;a href=&quot;https://docs.spring.io/spring-data/commons/docs/current/reference/html/#query-by-example&quot;&gt;query by example (Spring Data commons)&lt;/a&gt; provides more details
about the inner workings of this mechanism.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Updated query type&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type Query {
    account(username: String!): [Account]!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Restarting the app will now present the option to add a username interactively as a parameter to the query.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Query for an array of the same username&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  account(username: &quot;meistermeier&quot;) {
    username
    following {
      username
      server {
        uri
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Obviously, there is only one &lt;code&gt;Account&lt;/code&gt; with this username.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Response for query by username&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;data&quot;: {
    &quot;account&quot;: [
      {
        &quot;username&quot;: &quot;meistermeier&quot;,
        &quot;following&quot;: [
          {
            &quot;username&quot;: &quot;rotnroll666&quot;,
            &quot;server&quot;: {
              &quot;uri&quot;: &quot;mastodon.social&quot;
            }
          },
          {
            &quot;username&quot;: &quot;odrotbohm&quot;,
            &quot;server&quot;: {
              &quot;uri&quot;: &quot;chaos.social&quot;
            }
          }
        ]
      }
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Behind the scenes Spring for GraphQL adds the field as a parameter to the object that gets passed to the repositories as an example.
Spring Data Neo4j then inspects the example and creates matching conditions for the Cypher query, executes it and sends the result back to Spring GraphQL
for further processing to shape the result into the right response format.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(schematic) API call flow&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/mnrwi97vnhts/51rmOX116rFhpDaLfnoVjW/dd70e1b9be57c92a6ebca18ffa16c421/example_flow.png&quot; alt=&quot;example flow&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Pagination&lt;/h2&gt;
&lt;p&gt;Although the example data set is not this huge, it&apos;s often useful to have a proper functionality in place that allows to request the resulting data in chunks.
Spring for GraphQL uses the &lt;a href=&quot;https://relay.dev/graphql/connections.htm&quot;&gt;Cursor Connections specification&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A complete schema specification with all types looks like this.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Schema with cursor connections&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type Query {
    accountScroll(username:String, first: Int, after: String, last: Int, before:String): AccountConnection
}
type AccountConnection {
    edges: [AccountEdge]!
    pageInfo: PageInfo!
}

type AccountEdge {
    node: Account!
    cursor: String!
}

type PageInfo {
    hasPreviousPage: Boolean!
    hasNextPage: Boolean!
    startCursor: String
    endCursor: String
}
type Account {
    id: ID!
    username: String!
    displayName: String!
    server: Server!
    following: [Account]
    lastMessage: String!
}

type Server {
    uri: ID!
    title: String!
    shortDescription: String!
    connectedServers: [Server]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Even though I personally like to have a complete valid schema, it is possible to skip all the &lt;em&gt;Cursor Connections&lt;/em&gt; specific parts in the definition.
Just the query with the &lt;code&gt;AccountConnection&lt;/code&gt; definition is sufficient for Spring for GraphQL to derive and fill in the missing bits.
The parameters read as following&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;first&lt;/code&gt;: the amount of data to fetch if there is no default&lt;/li&gt;
&lt;li&gt;&lt;code&gt;after&lt;/code&gt;: scroll position after the data should be fetched&lt;/li&gt;
&lt;li&gt;&lt;code&gt;last&lt;/code&gt;: the amount of data to fetch before the &lt;code&gt;before&lt;/code&gt; position&lt;/li&gt;
&lt;li&gt;&lt;code&gt;before&lt;/code&gt;: scroll position until (exclusive) the data should be fetched&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One question remains:
In which order is the result set returned?
A stable sort order is a &lt;em&gt;must&lt;/em&gt; in this scenario, otherwise there is no guarantee that the database returns the data in a predictable order.
The repository needs also to extend the &lt;code&gt;QueryByExampleDataFetcher.QueryByExampleBuilderCustomizer&lt;/code&gt; and implement the &lt;code&gt;customize&lt;/code&gt; method.
In there it is also possible to add the default limit for the query, in this case &lt;em&gt;1&lt;/em&gt; to show the pagination in action.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Added sort ordering (and limit)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@GraphQlRepository
interface AccountRepository extends Neo4jRepository&amp;#x3C;Account, String&gt;,
       QueryByExampleDataFetcher.QueryByExampleBuilderCustomizer&amp;#x3C;Account&gt;
{

	@Override
	default QueryByExampleDataFetcher.Builder&amp;#x3C;Account, ?&gt; customize(QueryByExampleDataFetcher.Builder&amp;#x3C;Account, ?&gt; builder) {
		return builder.sortBy(Sort.by(&quot;username&quot;))
				.defaultScrollSubrange(new ScrollSubrange(ScrollPosition.offset(), 1, true));
	}

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the application has restarted, it is now possible to call the first pagination query.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pagination for the first element&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  accountScroll {
    edges {
      node {
        username
      }
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To get also the metadata for further interaction, some parts of the &lt;code&gt;pageInfo&lt;/code&gt; got also requested.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Result for the first element&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &quot;data&quot;: {
    &quot;accountScroll&quot;: {
      &quot;edges&quot;: [
        {
          &quot;node&quot;: {
            &quot;username&quot;: &quot;meistermeier&quot;
          }
        }
      ],
      &quot;pageInfo&quot;: {
        &quot;hasNextPage&quot;: true,
        &quot;endCursor&quot;: &quot;T18x&quot;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the &lt;code&gt;endCursor&lt;/code&gt; can be used for the next interaction.
Querying the application with this as the value for &lt;em&gt;after&lt;/em&gt; and with a limit of 2...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pagination for the last element&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  accountScroll(after:&quot;T18x&quot;, first: 2) {
    edges {
      node {
        username
      }
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;...results in the last element(s).
Also, the marker that there is no next page (&lt;code&gt;hasNextPage=false&lt;/code&gt;) indicates that the pagination reached the end of the data set.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Result for the last element&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;data&quot;: {
    &quot;accountScroll&quot;: {
      &quot;edges&quot;: [
        {
          &quot;node&quot;: {
            &quot;username&quot;: &quot;odrotbohm&quot;
          }
        },
        {
          &quot;node&quot;: {
            &quot;username&quot;: &quot;rotnroll666&quot;
          }
        }
      ],
      &quot;pageInfo&quot;: {
        &quot;hasNextPage&quot;: false,
        &quot;endCursor&quot;: &quot;T18z&quot;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is also possible to scroll through the data backwards by using the defined &lt;code&gt;last&lt;/code&gt; and &lt;code&gt;before&lt;/code&gt; parameters.
Also, it is completely valid to combine this scrolling with the already known features of query by example
and define a query in the GraphQL schema that also accepts fields of the &lt;code&gt;Account&lt;/code&gt; as filter criteria.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Filter with pagination&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;accountScroll(username:String, first: Int, after: String, last: Int, before:String): AccountConnection
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Let&apos;s federate&lt;/h2&gt;
&lt;p&gt;One of the big advantages in using GraphQL is the option to introduce federated data.
In a nutshell this means that data stored, e.g. in the database of the application, can be enriched, like in this case,
with data from a remote system / microservice / &lt;you name it&gt;.
In the end, the data will get presented via the GraphQL surface as one entity.
The consumer should not need to care about that multiple systems assembled this result.&lt;/p&gt;
&lt;p&gt;This data federation can be implemented by making use of the already defined controller.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SchemaMapping for federated data&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@Controller
class AccountController {

    @SchemaMapping
    String lastMessage(Account account) {
        var id = account.getId();
        String serverUri = account.getServer().getUri();

        WebClient webClient = WebClient.builder()
                        .baseUrl(&quot;https://&quot; + serverUri)
                        .build();

        return webClient.get()
                        .uri(&quot;/api/v1/accounts/{id}/statuses?limit=1&quot;, id)
                        .exchangeToMono(clientResponse -&gt;
                            clientResponse.statusCode().equals(HttpStatus.OK)
                            ? clientResponse
                                    .bodyToMono(String.class)
                                    .map(AccountController::extractData)
                            : Mono.just(&quot;could not retrieve last status&quot;)
                        )
                        .block();
    }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Adding the field &lt;code&gt;lastMessage&lt;/code&gt; to the &lt;code&gt;Account&lt;/code&gt; in the schema and restarting the application,
gives now the option to query for the accounts with this additional information.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Query with federated data&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  accounts {
    username
    lastMessage
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Response with federated data&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;data&quot;: {
    &quot;accounts&quot;: [
      {
        &quot;username&quot;: &quot;meistermeier&quot;,
        &quot;lastMessage&quot;: &quot;@taseroth erst einmal schauen, ob auf die Aussage auch Taten folgen ;)&quot;
      },
      {
        &quot;username&quot;: &quot;odrotbohm&quot;,
        &quot;lastMessage&quot;: &quot;Some #jMoleculesp/#SpringCLI integration cooking to easily add the former[...]&quot;
      },
      {
        &quot;username&quot;: &quot;rotnroll666&quot;,
        &quot;lastMessage&quot;: &quot;Werd aber das Rad im R?ckw?rts-Turbo schon irgendwie vermissen.&quot;
      }
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looking at the controller again, it becomes clear that the retrieval of the data is quite a bottleneck right now.
For every &lt;code&gt;Account&lt;/code&gt; a request gets issued after another.
But Spring for GraphQL helps to improve the situation of the ordered requests for each &lt;code&gt;Account&lt;/code&gt; after another.
The solution is to use &lt;a href=&quot;https://docs.spring.io/spring-graphql/docs/current/reference/html/#controllers.batch-mapping&quot;&gt;&lt;code&gt;@BatchMapping&lt;/code&gt;&lt;/a&gt; on the &lt;em&gt;lastMessage&lt;/em&gt; field in contrast to &lt;code&gt;@SchemaMapping&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BatchMapping for federated data&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@Controller
public class AccountController {
	@BatchMapping
	public Flux&amp;#x3C;String&gt; lastMessage(List&amp;#x3C;Account&gt; accounts) {
		return Flux.concat(
			accounts.stream().map(account -&gt; {
				var id = account.getId();
				String serverUri = account.getServer().getUri();

				WebClient webClient = WebClient.builder()
						.baseUrl(&quot;https://&quot; + serverUri)
						.build();

				return webClient.get()
						.uri(&quot;/api/v1/accounts/{id}/statuses?limit=1&quot;, id)
						.exchangeToMono(clientResponse -&gt;
								clientResponse.statusCode().equals(HttpStatus.OK)
								? clientResponse
									.bodyToMono(String.class)
									.map(AccountController::extractData)
								: Mono.just(&quot;could not retrieve last status&quot;)
						);
		}).toList());
	}

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To improve this situation even more, it is recommended to also introduce proper caching to the result.
It might not be necessary that the federated data gets fetched on every request but only refreshed after a certain period.&lt;/p&gt;
&lt;h2&gt;Testing and test data&lt;/h2&gt;
&lt;h3&gt;Neo4j-Migrations&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://michael-simons.github.io/neo4j-migrations/&quot;&gt;Neo4j-Migrations&lt;/a&gt; is a project that applies migrations to Neo4j.
To be sure that always a clean state of the data is present in the database, an initial Cypher statement is provided.
It has the same content as the Cypher snippet in the beginning of this post.
In fact, the content is included directly from this file.&lt;/p&gt;
&lt;p&gt;Putting Neo4j-Migrations on the classpath by providing the Spring Boot starter,
it will run all migrations from the default folder (&lt;em&gt;resources/neo4j/migrations&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Neo4j-Migrations dependency definition&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;#x3C;dependency&gt;
    &amp;#x3C;groupId&gt;eu.michael-simons.neo4j&amp;#x3C;/groupId&gt;
    &amp;#x3C;artifactId&gt;neo4j-migrations-spring-boot-starter&amp;#x3C;/artifactId&gt;
    &amp;#x3C;version&gt;${neo4j-migrations.version}&amp;#x3C;/version&gt;
    &amp;#x3C;scope&gt;test&amp;#x3C;/scope&gt;
&amp;#x3C;/dependency&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Testcontainers&lt;/h3&gt;
&lt;p&gt;Spring Boot 3.1 comes with a new features for &lt;a href=&quot;https://testcontainers.org&quot;&gt;Testcontainers&lt;/a&gt;.
One of this feature is the automatic setting of properties without the need to define &lt;code&gt;@DynamicPropertySource&lt;/code&gt;.
The (to Spring Boot known) properties will get populated at test execution time after the container has started.&lt;/p&gt;
&lt;p&gt;First the dependency definition for &lt;a href=&quot;https://testcontainers.com/modules/neo4j/&quot;&gt;Testcontainers Neo4j&lt;/a&gt; is needed in our &lt;em&gt;pom.xml&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Testcontainers dependency definition&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;#x3C;dependency&gt;
    &amp;#x3C;groupId&gt;org.testcontainers&amp;#x3C;/groupId&gt;
    &amp;#x3C;artifactId&gt;neo4j&amp;#x3C;/artifactId&gt;
    &amp;#x3C;scope&gt;test&amp;#x3C;/scope&gt;
&amp;#x3C;/dependency&gt;

&amp;#x3C;dependency&gt;
    &amp;#x3C;groupId&gt;org.testcontainers&amp;#x3C;/groupId&gt;
    &amp;#x3C;artifactId&gt;junit-jupiter&amp;#x3C;/artifactId&gt;
    &amp;#x3C;scope&gt;test&amp;#x3C;/scope&gt;
&amp;#x3C;/dependency&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To make use of Testcontainers Neo4j, a container definition &lt;em&gt;interface&lt;/em&gt; will be created.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Container configuration&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;interface Neo4jContainerConfiguration {

    @Container
    @ServiceConnection
    Neo4jContainer&amp;#x3C;?&gt; neo4jContainer = new Neo4jContainer&amp;#x3C;&gt;(DockerImageName.parse(&quot;neo4j:5&quot;))
            .withRandomPassword()
            .withReuse(true);

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This can then be used with the &lt;code&gt;@ImportTestContainers&lt;/code&gt; annotation in the (integration) test class.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Test annotated with &lt;code&gt;@ImportTestContainers&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@SpringBootTest
@ImportTestcontainers(Neo4jContainerConfiguration.class)
class Neo4jGraphqlApplicationTests {

    final GraphQlTester graphQlTester;

    @Autowired
    public Neo4jGraphqlApplicationTests(ExecutionGraphQlService graphQlService) {
        this.graphQlTester = ExecutionGraphQlServiceTester.builder(graphQlService).build();
    }

    @Test
    void resultMatchesExpectation() {
        String query = &quot;{&quot; +
                &quot;  account(username:\&quot;meistermeier\&quot;) {&quot; +
                &quot;    displayName&quot; +
                &quot;  }&quot; +
                &quot;}&quot;;

        this.graphQlTester.document(query)
                .execute()
                .path(&quot;account&quot;)
                .matchesJson(&quot;[{\&quot;displayName\&quot;:\&quot;Gerrit Meier\&quot;}]&quot;);

    }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For completeness this test class also includes the &lt;code&gt;GraphQlTester&lt;/code&gt; and an example how to test the application&apos;s GraphQL API.&lt;/p&gt;
&lt;h3&gt;Testcontainers at development time&lt;/h3&gt;
&lt;p&gt;It is also now possible to run the whole application directly from the test folder and use a Testcontainers image.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Application start with container from test class&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@TestConfiguration(proxyBeanMethods = false)
class TestNeo4jGraphqlApplication {

	public static void main(String[] args) {
		SpringApplication.from(Neo4jGraphqlApplication::main)
				.with(TestNeo4jGraphqlApplication.class)
				.run(args);
	}

	@Bean
	@ServiceConnection
	Neo4jContainer&amp;#x3C;?&gt; neo4jContainer() {
		return new Neo4jContainer&amp;#x3C;&gt;(&quot;neo4j:5&quot;).withRandomPassword();
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;@ServiceConnection&lt;/code&gt; annotation also takes care that the application started from the test class knows
the coordinates the container is running at (connection string, username, password...).&lt;/p&gt;
&lt;p&gt;To start the application outside the IDE, it is now also possible to invoke &lt;code&gt;./mvnw spring-boot:test-run&lt;/code&gt;.
If there is only one class with a main method in the test folder, it will get started.&lt;/p&gt;
&lt;h2&gt;Topics left out / Try it&lt;/h2&gt;
&lt;p&gt;In parallel to the &lt;code&gt;QueryByExampleExecutor&lt;/code&gt;, support for &lt;code&gt;QuerydslPredicateExecutor&lt;/code&gt; exists in the Spring Data Neo4j module.
To make use of it, the repository needs to extend the &lt;code&gt;CrudRepository&lt;/code&gt; instead of the &lt;code&gt;Neo4jRepository&lt;/code&gt; and also declare it
as a &lt;code&gt;QuerydslPredicateExecutor&lt;/code&gt; for the given type.
Adding support for scrolling/pagination would require to also add the &lt;code&gt;QuerydslDataFetcher.QuerydslBuilderCustomizer&lt;/code&gt; and implement its &lt;code&gt;customize&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;The whole infrastructure presented in this blog post is also available for the reactive stack.
Basically prefixing everything with &lt;code&gt;Reactive...&lt;/code&gt; (like &lt;code&gt;ReactiveQuerybyExampleExecutor&lt;/code&gt;) will turn this into a reactive application.&lt;/p&gt;
&lt;p&gt;Last but not least, the scroll mechanism used here is based on an &lt;code&gt;OffsetScrollPosition&lt;/code&gt;.
There is also a &lt;a href=&quot;https://docs.spring.io/spring-graphql/docs/current/reference/html/#data.pagination.scroll.keyset&quot;&gt;&lt;code&gt;KeysetScrollPosition&lt;/code&gt;&lt;/a&gt; that can be used.
It makes use of the sort property/properties in combination with the defined id.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@Override
default QueryByExampleDataFetcher.Builder&amp;#x3C;Account, ?&gt; customize(QueryByExampleDataFetcher.Builder&amp;#x3C;Account, ?&gt; builder) {
	return builder.sortBy(Sort.by(&quot;username&quot;))
			.defaultScrollSubrange(new ScrollSubrange(ScrollPosition.keyset(), 1, true));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;It&apos;s nice to see how convenient methods in Spring Data modules do not only provide a broader accessibility for users&apos; use-cases,
but also get used by other Spring projects to reduce the amount of code that needs to be written.
This results in less maintenance for the existing code base and helps focussing on the business problem instead of infrastructure.&lt;/p&gt;
&lt;p&gt;This post got a little bit longer because I explicitly want to touch at least the surface on what is happening when a query gets invoked
without speaking just about the &lt;em&gt;automagical&lt;/em&gt; result.&lt;/p&gt;
&lt;p&gt;Please go ahead and explore more about what is possible and how the application behaves for different types of queries.
It is next to impossible to cover every topic and feature that is available within one blog post.&lt;/p&gt;
&lt;p&gt;Happy GraphQL coding and exploring. You can find the example project on GitHub at &lt;a href=&quot;https://github.com/meistermeier/spring-graphql-neo4j&quot;&gt;https://github.com/meistermeier/spring-graphql-neo4j&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[This Week in Spring - June 27th, 2023]]></title><link>https://spring.io/blog/2023/06/27/this-week-in-spring-june-27th-2023</link><guid isPermaLink="true">https://spring.io/blog/2023/06/27/this-week-in-spring-june-27th-2023</guid><dc:creator><![CDATA[Josh Long]]></dc:creator><pubDate>Tue, 27 Jun 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Hi Spring fans! Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! This week I am in Seoul talking to developers about the latest-and-greatest in Spring Boot 3! There&apos;s so much great stuff coming, and so much great stuff already. There are a few things I&apos;m super excited about.&lt;/p&gt;
&lt;p&gt;First, yesterday I did a joint presentation with my friend the one the only the amazing Trustin Lee, creator of Netty and lead of the Armeria Project over at LINE corporation. LINE is a super popular social messaging application used a lot in Korea and in Japan. It was a ton of &lt;a href=&quot;https://pbs.twimg.com/media/FznQPxgWYAAMd0D?format=jpg&amp;#x26;name=large&quot;&gt;fun collaborating with, and copresenting with, him&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next, I&apos;m elated that I&apos;m going to be presenting at the &lt;strong&gt;Seoul SpringOne Tour&lt;/strong&gt; on June 28th (tomorrow!), 2023! Come join me &lt;a href=&quot;https://connect.tanzu.vmware.com/Event_Spring_One_Tour_Q224_KR.html&quot;&gt;and we&apos;ll look at Spring Boot 3!&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Relatedly, I&apos;ll also  be doing a SpringOne Tour event in Singapore on July 4th at 09:30! Come join us and we&apos;ll see &lt;a href=&quot;https://connect.tanzu.vmware.com/SpringOne_Tour_SG_July.html&quot;&gt;how Spring Boot 3.1 and TAP take you to production faster&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Now then, we&apos;ve got  a lot to get into so let&apos;s dive right in!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2023/06/22/a-bootiful-podcast-micrometer-lead-tommy-ludwig-from-spring-io-2023&quot;&gt;A Bootiful Podcast: Micrometer lead Tommy Ludwig&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jvwilge.github.io/en/2023/06/21/spring-docker-compose.html&quot;&gt;Automatically spin up a Docker Compose environment for your local and integration test environment with Spring Boot 3.1.0+&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2023/06/21/docker-compose-support-in-spring-boot-3-1&quot;&gt;Docker Compose Support in Spring Boot 3.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2023/06/23/improved-testcontainers-support-in-spring-boot-3-1&quot;&gt;Improved Testcontainers Support in Spring Boot 3.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2023/06/23/spring-modulith-1-0-m1-released&quot;&gt;Spring Modulith 1.0 M1 released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kotlinlang.org/docs/jvm-get-started-spring-boot.html#join-the-community&quot;&gt;they updated the getting started with Spring Boot and Kotlin article here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;I love this blog on &lt;a href=&quot;https://auth0.com/blog/get-started-with-okta-spring-boot-starter/&quot;&gt;getting started with Spring Boot and Auth0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.baeldung.com/spring-boot-security-autoconfiguration&quot;&gt;Baeldung updated their Spring Boot Security Auto-configuration explainer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;This is kind of an interesting exercise: how to &lt;a href=&quot;https://medium.com/@dixitsatish34/spring-boot-how-to-implement-generic-webclient-for-all-ms-52b2c335efab&quot;&gt;implement a generic &lt;code&gt;WebClient&lt;/code&gt; for all microservices with Spring&apos;s &lt;code&gt;WebClient&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jay Kim&apos;s got a nice blog looking at how to &lt;a href=&quot;https://jskim1991.medium.com/spring-boot-declarative-http-clients-in-spring-mvc-and-spring-webflux-3dd2645485c8&quot;&gt;use Spring Framework 6&apos;s new declarative HTTP clients &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Baeldung has a nice blog looking at how &lt;a href=&quot;https://www.baeldung.com/spring-boot-opentelemetry-setup&quot;&gt;to setup OpenTelemetry support in Spring Boot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Spring Modulith 1.0 M1 released]]></title><link>https://spring.io/blog/2023/06/23/spring-modulith-1-0-m1-released</link><guid isPermaLink="true">https://spring.io/blog/2023/06/23/spring-modulith-1-0-m1-released</guid><dc:creator><![CDATA[Oliver Drotbohm]]></dc:creator><pubDate>Fri, 23 Jun 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I am happy to announce the release of Spring Modulith 1.0 M1. This is an important milestone for the project and the first step on the road to promote it from an experimental to an official Spring project. This means that we ship a couple of breaking changes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The group identifier is now &lt;code&gt;org.springframework.modulith&lt;/code&gt; (previously &lt;code&gt;org.springframework.experimental&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;The Spring Boot baseline of the project is 3.1 (previously 3.0).&lt;/li&gt;
&lt;li&gt;The name of the actuator endpoint exposing the application module structure is now &lt;code&gt;application-modules&lt;/code&gt; (previously &lt;code&gt;applicationmodules&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;The previously deprecated configuration properties in the JDBC-based event registry have been removed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, note that milestone releases need to be obtained from our Artifactory repository under &lt;a href=&quot;https://repo.spring.io/milestone&quot;&gt;https://repo.spring.io/milestone&lt;/a&gt;. The release also includes a couple of bug fixes and new features over 0.6, which can be found in the official &lt;a href=&quot;https://github.com/spring-projects/spring-modulith/releases/tag/1.0.0-M1&quot;&gt;change log&lt;/a&gt;. A comprehensive overview about the project can be found in the &lt;a href=&quot;https://docs.spring.io/spring-modulith/docs/1.0.0-M1/reference/html/&quot;&gt;reference documentation&lt;/a&gt;.&lt;/p&gt;</content:encoded></item></channel></rss>
>>>>>>> origin/dev
